import java.util.*;

public class ValidParentheses {
    public static boolean isValid(String s) {
        // Map closing -> opening
        Map<Character, Character> match = Map.of(
            ')', '(', 
            '}', '{', 
            ']', '['
        );

        Deque<Character> stack = new ArrayDeque<>();

        for (char ch : s.toCharArray()) {
            // if opening, push
            if (ch == '(' || ch == '{' || ch == '[') {
                stack.push(ch);
            } 
            // if closing, stack must not be empty and top must match
            else if (match.containsKey(ch)) {
                if (stack.isEmpty() || stack.pop() != match.get(ch)) return false;
            } 
            // ignore any other characters (optional: return false instead)
            else {
                return false; // uncomment this if input must contain only brackets
            }
        }
        return stack.isEmpty();
    }

    // Simple test
    public static void main(String[] args) {
        System.out.println(isValid("[{()}]"));   // true
        System.out.println(isValid("([)]"));     // false
        System.out.println(isValid("((("));      // false
        System.out.println(isValid(""));         // true (empty string is valid)
    }
}
